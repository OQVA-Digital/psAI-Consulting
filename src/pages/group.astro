---

import Layout from '../layouts/Layout.astro';

import Logo from '../components/svg/Logo.astro';
import LogoWaves from '../components/svg/LogoWaves.astro';
import LogoGroups from '../components/svg/LogoGroups.astro';

import { Schema } from "astro-seo-schema"

import Graphic01 from '../components/svg/graphics/Graphic01.astro';
import ProblemGraphic from '../components/svg/graphics/ProblemGraphic.astro';
import Graphic02 from '../components/svg/graphics/Graphic02.astro';
import Graphic03 from '../components/svg/graphics/Graphic03.astro';
import Graphic04 from '../components/svg/graphics/Graphic04.astro';
import Graphic05 from '../components/svg/graphics/Graphic05.astro';
import Graphic06 from '../components/svg/graphics/Graphic06.astro';
import Graphic07 from '../components/svg/graphics/Graphic07.astro';

import Worm from '../components/svg/graphics/Worm.astro'
import CornerGraphic01 from '../components/svg/graphics/CornerGraphic01.astro';
import CornerGraphic02 from '../components/svg/graphics/CornerGraphic02.astro';

import { Image, getImage } from 'astro:assets';

import AndreiCroitor from "../assets/team/andrei-croitor.jpg";
import JasonGeorge from "../assets/team/jason-george.jpg";
import NdaliLiitaCairney from "../assets/team/ndali-liita-cairney.jpg";
import RayhanBeebeejaun from "../assets/team/rayhan.beebeejaun.jpg";
import TsvetelinAnastasov from "../assets/team/tsvetelin-anastasov.jpg";

import Analysis from '../components/svg/icons/Analysis.astro'
import Chart from '../components/svg/icons/Chart.astro'
import HeartBeat from '../components/svg/icons/HeartBeat.astro'
import Idea from '../components/svg/icons/Idea.astro'
import List from '../components/svg/icons/List.astro'
import Strategy from '../components/svg/icons/Strategy.astro'


import Define from '../components/svg/services/DefineSVG.astro'
// import Align from '../components/svg/services/AlignSVG.astro'
import Flow from '../components/svg/services/FlowSVG.astro'
import Run from '../components/svg/services/RunSVG.astro'
---

<style>
    body::before {
        background-image: url(/svg/dark-noise-bg.svg), linear-gradient(-30deg, #0e0925, #060823);
    }
</style>

<Layout logoAnchorTheme="dark">
<main>
    <section class="centered padding">
        <div class="ctnr">
            <h1 class="psai_group_logo">psAI <span class="group_name">Group</span></h1>
    
            <div class="groups">
                
            </div>
        </div>
    </section>
</main>

<Schema
    item={
    {
        "@context": "https://schema.org",
        "@type": "WebPage",
        "name":"psAI Consulting - Unlock the Potential of AI Integration",
        "url":`${Astro.url}`,
        "description":"AI integration and analysis through a blend of agility, insight, and innovation. Transform uncertainties into identifiable opportunities with AI implementation.",
    }
    }
/>

<Schema
    item={
    {
        "@context": "https://schema.org",
        "@type":"WebSite",
        "name":"psAI Consulting",
        "url":`${Astro.url}`,
    }
    }
/>

<Schema
    item={
    {
        "@context": "https://schema.org",
        "@type":"Organization",
        "name":"psAI Consulting",
        "legalName":"psAI Consulting",
        "url":`${Astro.url}`,
        "@id":`${Astro.url}`,
    }
    }
/>
</Layout>

<!-- <script is:inline>
const header = document.querySelector('header');
const hamBt = document.querySelector(".hambt");
const nav = document.querySelector("header");
const navBts = document.querySelectorAll("header a, header button");
const exitArea = document.querySelector('.exit_area');
const contactBox = document.querySelector('section.contact');
const contactBts = document.querySelectorAll('.contact_bt');
const pulsePaths = document.querySelectorAll('.pulse');

let showingNav = false;
let showingContactBox = false;

function toggleExitArea() {
exitArea.classList.toggle('show', showingContactBox || showingNav);
}

function toggleNav() {
showingNav = !showingNav;
hamBt.classList.toggle('active', showingNav);
nav.classList.toggle("show", showingNav);
toggleExitArea();

controlPathAnimation(showingNav ? 'paused' : 'running');

if (showingContactBox) {
    toggleContactBox();
}
}

function controlPathAnimation(state) {
pulsePaths.forEach(path => path.style.animationPlayState = state);
}

function toggleContactBox() {
showingContactBox = !showingContactBox;
contactBox.classList.toggle('show', showingContactBox);
controlPathAnimation(showingContactBox ? 'paused' : 'running');
toggleExitArea();
}

hamBt.addEventListener("click", toggleNav);

if (window.matchMedia('(max-width:850px)').matches) {
navBts.forEach(btn => {
    btn.addEventListener("click", () => {
        toggleNav();
        if (showingContactBox) {
            toggleContactBox();
        }
    });
});
}

window.addEventListener("scroll", () => {
if (showingNav) {
    toggleNav();
}
});

contactBts.forEach(btn => {
btn.addEventListener('click', toggleContactBox);
});

exitArea.addEventListener('click', () => {
if (showingContactBox) {
    toggleContactBox();
} else if (showingNav) {
    toggleNav();
}
});

</script> -->

